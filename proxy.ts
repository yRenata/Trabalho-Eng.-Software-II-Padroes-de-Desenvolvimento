// Interface comum para o documento
interface Documento {
  exibir(): void;
}

// Classe que representa o usu√°rio
class User {
  constructor(public nome: string, public nivelAcesso: number) {}
}

// Classe real com o conte√∫do confidencial
class DocumentoConfidencial implements Documento {
  private conteudo: string;

  constructor() {
    this.conteudo = "Este √© um documento CONFIDENCIAL.";
  }

  exibir(): void {
    console.log(`üìÑ Documento: ${this.conteudo}`);
  }
}

// Proxy que controla o acesso ao documento
class DocumentoProxy implements Documento {
  private documentoReal: DocumentoConfidencial | null = null;

  constructor(private usuario: User, private nivelNecessario: number = 5) {}

  exibir(): void {
    if (this.usuario.nivelAcesso >= this.nivelNecessario) {
      if (!this.documentoReal) {
        this.documentoReal = new DocumentoConfidencial();
      }
      console.log(`‚úÖ Acesso permitido para ${this.usuario.nome}`);
      this.documentoReal.exibir();
    } else {
      console.log(`‚õî Acesso negado para ${this.usuario.nome}. N√≠vel necess√°rio: ${this.nivelNecessario}`);
    }
  }
}

// Simula√ß√£o de dois usu√°rios com diferentes n√≠veis de acesso
const usuarioComum = new User("Jo√£o", 2);
const gerente = new User("Ana", 6);

// Tentando acessar o documento com ambos os usu√°rios
const proxy1 = new DocumentoProxy(usuarioComum);
const proxy2 = new DocumentoProxy(gerente);

proxy1.exibir(); // ‚õî Deve negar o acesso
proxy2.exibir(); // ‚úÖ Deve permitir o acesso e mostrar o documento
